Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4

====== PCR-772.1 Incorporation in Comanche 67 ======

([[comanche-67-reconstruction|Return to main Comanche 67 reconstruction page.]])

We do not have a copy of PCR-772.1, "Libration Vector at Landing Time". I do note that according to the [[https://www.ibiblio.org/apollo/Documents/j2-80-R-567-SEC5-REV11_text.pdf#page=15|Luminary 1E GSOP]], the corresponding PCR-772.2 for Luminary was incorporated at either Luminary 1A or Luminary 1B. Therefore, comparison of Luminary 1A code vs Luminary 1C code should provide detailsthat could be incorporated into Colossus 2Cabout any PCR-772-related coding change, if it turns out to be necessary.

This PCR appears to refer to the variable 504LM, "MOON LIBRATION VECTOR", and/or to the code which uses that variable. At one point this seems to have been a fixed constant, since appears as such, commented out, in various AGC versions. Later, however, it must have been moved to erasable and was provided by pad loads. For both Colossus and Luminary (and Sundance), 504LM is mentioned in log sections ERASABLE ASSIGNMENTS (naturally!), GROUND TRACKING DETERMINATION PROGRAM - P21, ORBITAL INTEGRATION, and PLANETARY INERTIAL ORIENTATION. In fact, though, the only 504LM-related change in these log sections between Luminary 99 and Luminary 131 is the introduction of the routine

'''
MATRIXVXV	VCOMP 
			504LM 		# ROUTINE TRANSLATES FROM PLANETARY 
		VAD 			# TO INERTIAL COORDINATES 
		VXM	RVQ 
			MMATRIX
'''

between the COSPHIE and DIFEQTAB routines in ORBITAL INTEGRATION.

Observing the code for the current state of the Comanche 67 reconstruction, namely ORBITAL_INTEGRATION.gpp, I find that this code has indeed already been inserted, just as described, using the "Reconstruction772" preprocessor label for conditional assembly.

However, simply inserting this routine isn't adequate, since calls to it must presumably be inserted as well, or else the routine will never be executed. In all versions (Colossus and Luminary) containing the MATRIX routine, there are two calls to MATRIX, both near the end of the OBLATE routine of ORBITAL INTEGRATION. However, it's tricky to know whether to just paste in the end of the OBLATE routine from some other AGC version, since the beginning of the COMTERM routine that follows OBLATE also has changed somewhat drastically, and it's not immediately clear how much of the change to OBLATE and COMTERM in (say) Luminary 131 is relevant to Colossus 2C.

I reason as follows: If OBLATE and COMTERM are generic, in the sense that they apply to both the CM and LM, and don't contain CM-specific code or LM-specific code, it would be reasonable to assume that the Apollo 12 LM version of OBLATE+COMTERM would be the same as the CM version of OBLATE+COMTERM. If we diff the Apollo 12 LM version (i.e., Luminary 116) of OBLATE+COMTERM vs the Apollo 15 CM version (i.e., Artemis 72), we in fact find that OBLATE+COMTERM are //identical//. Therefore, I infer that the end of OBLATE and the beginning of COMTERM should be imported from (say) Luminary 116 into the Comanche 67 reconstruction, and conditionally assembled using the Reconstruction772 preprocessor label.

( **Note:**  Some time after writing the paragraph above, and the ones below, I began to have doubts about the argument that Comanche 2C's OBLATE+COMTERM was identical to Luminary 116. Not that the argument is bad, but it just sounds like a cop-out for doing the obvious, which is to compare the [[https://www.ibiblio.org/apollo/Documents/E-2456-2C.pdf#page=73|Colossus 2C flowchart FC-2300]] for OBLATE+COMTERM to Luminary 116's code for it. I'm afraid that the hidden motive behind the argument above was most likely that the flowchart is //very hard// to follow and to compare to the code, so I was eager to accept any rationalization that let me avoid doing it! However, it has belatedly occurred to me that there is a way to do the flowchart comparison in a reasonably painless way, and that is to compare the Colossus 2C flowchart to the Luminary 1B flowchart. We actually don't have the Luminary 1B flowchart, but we do have the [[https://www.ibiblio.org/apollo/Documents/j2-80-E-2471-REV2-VOL1//text.pdf|Luminary 1D flowchart FC-3355]], which //if_ it matches, is just as good for our purposes. At any rate, I've done a detailed comparison of the two flowcharts, just for the 7 pages covering OBLATE+COMTERM, comparing not only the flowchart boxes but the comments as well. They are identical. I don't believe that the flowchart was even redrawn. I think that they simply replaced the title blocks and a handful of sheet numbers and flowchart numbers. I feel very confident that the Comanche 55 and Luminary 116 code for OBLATE+COMTERM at least started out identical. I say "started out" because ... well, just keep reading below.)

In looking at the existing state of the reconstruction, I find that this change (OBLATE+COMTERM) has already been made as well.

I also find several additional changes throughout the gpp/\*.gpp code as well, conditioned on Reconstruction772, and my analysis above hasn't justified those changes in any way. The additional changes are all memory-bank changes ... i.e., movement of code from one memory bank in the Comanche 55 baseline to a different memory bank in the Comanche 67 baseline. (Note, by the way, that OBLATE+COMTERM+MATRIX are all in memory bank 11 in the reconstruction.) One such change is reasonably justifiable: In Apollo 10 and 11 Colossus and Luminary, portions of the inline code in COMTERM had been clipped out, renamed QUALITY1 and QUALITY2, and placed in different memory banks. Presumably this was done to free up some fixed memory in the bank containing COMTERM. However, this change does not appear in other Colossus and Luminary versions, and particularly not n Luminary 116, so it's reasonable that Comanche 67 would return to inlining this code.

Presumably, re-inlining QUALITY1+QUALITY2 into COMTERM would necessitate using some other method for freeing up fixed memory, and this presumably was the inspiration for the other memory-bank changes. However, I've removed all of the "arbitrary" bank changes, leaving only the re-inlining of QUALITY1+QUALITY2. This removal actually helped the "goodness" signature (as if that matters), and did not increase the number of overflowing banks, although different banks overflow now than overflowed before.

In particular, bank 11 now overflows by 26 words, which is just about the size of QUALITY1+QUALITY2 which have been re-inlined into COMTERM. However, the code in COMTERM corresponding to QUALITY1+QUALITY2 plus the remainder of the code in COMTERM following them seems to have changed significantly, and not simply due to even/odd realignment of interpreter instructions. Consequently, repeating the trick of pulling code similar to QUALITY1+QUALIT2 from the middle of COMTERM and shoving it into a different bank to remove the overflow is no longer simple, since the Comanche 55 QUALITY1+QUALITY2 no longer look equivalent to the instructions presently in COMTERM.

After the analysis above was performed, I found out that PCR-776.1 ("Improved R2 Model Timing") seems to affect the very same areas of COMTERM affected by PCR-772.1. This is likely the reason that the routines QUALITY1 and QUALITY2 can no longer be used as is.

With all that said, I think that although the bank 11 overflow was caused by PCR-772.1 + PCR-776.1, I don't think the solution for the overflow is really within the scope of those PCRs, so I won't continue discussion of it here. The issue will be pursued instead by [[memory-bank-assignments-for-comanche-67|a separate page dedicated to bank overflows]].

In summary, I'd say that PCR-772.1 has been incorporated in code.

